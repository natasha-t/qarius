//Helper functions to handle API data, post sorting

// var tumblr = require('tumblr.js');
// var client = tumblr.createClient({
//   consumer_key: 'Oh8fppC7uDzKENpreatfnJtwhmAqKXA1o5jZqdT5v1EfDf5nQz',
//   consumer_secret: 'z48ygByyfRQnOcg4YMcZlHQV7znh6dxe6joJ8miAJOJ00fKYvE',
//   token: '',
//   token_secret: ''
// });

module.exports = {

  //getPosts should return an array of post objects to be passed to the view

   getPosts: function(client, blogName) {
    return new Promise(function(resolve, reject) {
      client.blogLikes(blogName, function(err, data){
        var jsonString = JSON.stringify(data);
        var obj = JSON.parse(jsonString);
        var likedPosts = obj.liked_posts;
        var allPosts = [];
        for (var i = 0; i < likedPosts.length; i++){
          var post = {};
          post['blogName'] = likedPosts[i].blog_name;
          post['type'] = likedPosts[i].type;

          allPosts.push(post);
        }
        resolve(allPosts);
      });
    });
  },

  sortPosts: function(posts, test, callback){
    var sorted = [];
    for(var i = 0; i < posts.length; i++){
      if(test(posts[i])) {
        sorted.push(callback(posts[i]));
      }
    }
    return sorted;
  },

  getPhotoPosts: function(allPosts) {
    var photoPosts = [];
    for(var i = 0; i < allPosts.length; i++){
        console.log(allPosts[i]);
      if(allPosts[i]['type'] === 'photo'){
        var photoPost = {};
        photoPost['blogName'] = allPosts[i].blog_name;
        photoPost['photoUrl'] = allPosts[i].photos[0].alt_sizes[1].url;
        photoPosts.push(photoPost);
      }
    };
      return photoPosts;
  },

  postCreator: function(post, type) {
    var postObj;
  if (type === 'photo') {
    return postObj = {
      blogName: post.blog_name,
      photoUrl: post.photos[0].alt_sizes[1].url
    };
  };

  if (type === 'text') {
    return postObj = {
      blogName: post.blog_name,
      text: post.body,
      title: post.title
    };
  };

  if (type === 'quotes'){
    return postObj = {
      blogName: undefined,
      source: undefined,
      text: undefined
    };
  };

  if (type === 'link') {
    return postObj = {
      blogName: undefined,
      publisher: undefined,
      title: undefined,
      url: undefined,
      excerpt: undefined,
      linkAuthor: undefined,
      linkImage: undefined
    };
  };

  if (type === 'videos') {
    return postObj = {
      blogName: undefined,
      caption: undefined,
      player: undefined
    };
  };

  if (type === 'audio'){
    return postObj = {
      blogName: undefined,
      caption: undefined,
      player: undefined,
    };
  };

  }

};



