//Helper functions to handle API data, post sorting

module.exports = {

  //getPosts should return an array of post objects to be passed to the view

   getPosts: function(client, blogName) {
    return new Promise(function(resolve, reject) {
      client.blogLikes(blogName, {limit: 50 }, function(err, data){
        var jsonString = JSON.stringify(data);
        var obj = JSON.parse(jsonString);
        var likedPosts = obj.liked_posts;

        resolve(likedPosts);
      });
    });
  },

  sortPosts: function(posts, test, callback){
    var sorted = [];
    for(var i = 0; i < posts.length; i++){
      if(test(posts[i])) {
        sorted.push(callback(posts[i]));
      }
    }
    return sorted;
  },

  postCreator: function(post, type) {
    var postObj;
  if (type === 'photo') {
    return postObj = {
      blogName: post.blog_name,
      photoUrl: post.photos[0].alt_sizes[1].url
    };
  };

  if (type === 'text') {
    return postObj = {
      blogName: post.blog_name,
      title: post.title,
      body: post.body
    };
  };

  if (type === 'quote'){
    return postObj = {
      blogName: post.blog_name,
      source: post.source,
      text: post.text
    };
  };

  if (type === 'link') {
    return postObj = {
      blogName: post.blog_name,
      publisher: post.publisher,
      title: post.title,
      url: post.url,
      excerpt: post.excerpt,
      linkAuthor: post.link_author,
      linkImage: post.link_image
    };
  };

  if (type === 'video') {
    return postObj = {
      blogName: post.blog_name,
      caption: post.caption,
      player: post.player[2].embed_code
    };
  };

  if (type === 'audio'){
    return postObj = {
      blogName: post.blog_name,
      caption: post.caption,
      player: post.player,
    };
  };

  },

  // getAvatar: function(client, blogName) {
  //   client.blogAvatar(blogName, 64, function(err, resp){
  //     console.log(resp);
  //   });
  // }

};



